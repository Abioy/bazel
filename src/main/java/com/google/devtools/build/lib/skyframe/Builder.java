// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.devtools.build.lib.skyframe;

import com.google.devtools.build.lib.actions.Artifact;
import com.google.devtools.build.lib.actions.BuildFailedException;
import com.google.devtools.build.lib.actions.Executor;
import com.google.devtools.build.lib.actions.TestExecException;
import com.google.devtools.build.lib.concurrent.ThreadSafety.ThreadCompatible;
import com.google.devtools.build.lib.util.AbruptExitException;
import com.google.devtools.build.lib.view.ConfiguredTarget;

import java.util.Collection;
import java.util.Set;

/**
 * A Builder consumes an Action graph, and executes it in some topological
 * order, possibly concurrently, using some dependency-checking policy.
 *
 * <p> The methods of the Builder interface are typically long-running, but
 * honour the {@link java.lang.Thread#interrupt} contract: if an interrupt is
 * delivered to the thread in which a call to buildTargets or buildArtifacts is
 * active, the Builder attempts to terminate the call prematurely, throwing
 * InterruptedException.  No guarantee is made about the timeliness of such
 * termination, as it depends on the ability of the Actions being executed to
 * be interrupted, but typically any running subprocesses will be quickly
 * killed.
 */
public interface Builder {

  /**
   * Build all files generated by the specified artifacts, and all necessary
   * prerequisites. For sequential implementations of this interface, the
   * artifacts will be build in the iteration order of the Set provided; for
   * concurrent implementations, the order is undefined.
   *
   * <p>This method should not be invoked more than once concurrently on the same
   * Builder instance.
   *
   * @param artifacts the set of Artifacts to build
   * @param exclusiveTestArtifacts artifacts to build one at a time after all others have been built
   * @param targetsToBuild Set of targets which will be built.
   * @param executor an opaque application-specific value that will be
   *        passed down to the execute() method of any Action executed during
   *        this call.
   * @param builtTargets (out) set of successfully built subset of targetsToBuild. This set is
   *        populated immediately upon confirmation that artifact is built so it will be
   *        valid even if a future action throws ActionExecutionException.
   * @throws BuildFailedException if there were problems establishing the action execution
   *         environment, if the the metadata of any file  during the build could not be obtained,
   *         if any input files are missing, or if an action fails during execution
   * @throws InterruptedException if there was an asynchronous stop request.
   * @throws TestExecException if any test fails
   */
  @ThreadCompatible
  void buildArtifacts(Set<Artifact> artifacts,
                      Set<Artifact> exclusiveTestArtifacts,
                      Collection<ConfiguredTarget> targetsToBuild,
                      Executor executor,
                      Set<ConfiguredTarget> builtTargets,
                      boolean explain)
      throws BuildFailedException, AbruptExitException, InterruptedException, TestExecException;
}
