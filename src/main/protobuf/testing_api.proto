// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file defines a set of Google-wide standard protocol buffers for
// exchanging test environment and test result information between different
// build and testing tools.

syntax = "proto2";

package testing_api;
option java_multiple_files = true;
option java_package = "com.google.testing.proto";

//
// Status of a test target
//
enum TestStatus {
  PASSED = 0;
  FAILED = 1;
  FAILED_TO_BUILD = 2;
  TIMEOUT = 3;
  INTERRUPTED = 4;
  // for long running tests, status can be set to PENDING first and
  // updated later
  PENDING = 5;
  INTERNAL_ERROR = 6; // Used for failures caused by the test runner itself.
}

//
// Size of a test target
//
enum TestSize {
  UNSPECIFIED_SIZE = 0;
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 3;
  ENORMOUS = 4;
}

//
// Strategy used for running a test target
//
enum TestStrategy {
  UNSPECIFIED_STRATEGY = 0;
  REMOTE = 1;
  LOCAL_PARALLEL = 2;
  LOCAL_SEQUENTIAL = 3;
}

//
// Mode of instrumentation for coverage
//
enum CoverageInstrumentation {
  UNSPECIFIED_INSTRUMENTATION = 0;
  RUNTIME = 1;
  OFFLINE = 2;
}

//
// Represents a text file. It may contain:
//   * a pathname. Can be either absolute or relative. In either case, any tool
//     using this proto should be able to resolve it and locate the file on disk
//   * content of the text file
//   * additional extensions
//
// If only the pathname is specified, it's the downstream tool's responsibility
// to read in the content of the file before archiving or transmitting the proto.
//
// The tool reading the content may choose to truncate it if the file is too
// large.
//
message TextFile {
  optional string pathname = 1;
  optional string content = 2;
  extensions 3 to 20;
}

//
// Coverage info for a single line in a source file
//
message LineCoverage {
  required int32 line_number = 1;
  required int32 execution_count = 2;
}

//
// Coverage info for a single source file
//
message FileCoverage {
  required string file_name = 1; // File name along with its full path
  required int32 lines_instrumented = 2;
  required int32 lines_executed = 3;
  required float estimated_coverage = 4;
  repeated LineCoverage line_coverage = 5;
}

//
// Contains coverage info for all source files that a test target covers
//
message TargetCoverage {
  required CoverageInstrumentation instrumentation = 1
      [default=UNSPECIFIED_INSTRUMENTATION];
  repeated FileCoverage file_coverage = 2;
  optional TextFile lcov = 3;
  // A serialized proto containing per-test coverage
  optional TextFile micro_coverage = 4;
}

//
// Represents a failure from a testsuite or a testcase.
//
// Assertions are used to check for the possibility of failures, therefore
// failures are anticipated.
//
message TestFailure {
}

//
// Represents an error from a testsuite or a testcase.
//
// Errors are unanticipated problems resulting in uncaught exceptions being
// propagated from a xUnit test method.
//
message TestError {
}

//
// Represents a hierarchical test result, for example, testsuite or testcase
// result in ant/junit style xml log, which is also supported at Google by
// python and gUnit.
//
message HierarchicalTestResult {
  repeated HierarchicalTestResult child = 1;
  required string name = 2;
  optional string class_name = 3;        // Not used for suites or decorators.
  required int64 run_duration_millis = 5;
  repeated TestFailure failure = 11;
  repeated TestError error = 12;
}

//
// Represents a warning from a testsuite or a testcase.
//
message TestWarning {
  required string warning_message = 1;
}

//
// Represents a hierarchical timing breakdown of an activity.
// The top level time should be the total time of the activity.
// Invariant: time_millis >= sum of time_millis of all direct children.
//
message TimingBreakdown {
  repeated TimingBreakdown child = 1;
  required string name = 2;
  required int64 time_millis = 3;
}

message InfrastructureFailureInfo {
  optional string origin = 1;
  optional string cause = 2;
}

//
// Represents the result of invoking a test target once
//
message TestTargetResult {
  required string name = 1;
  required TestStatus status = 2;
  optional string status_details = 3;
  required int64 start_time_millis = 4; // since January 1, 1970 UTC
  required int64 run_duration_millis = 5;
  // how long the test is allowed to run before it's killed
  optional int32 timeout_seconds = 6;
  optional int32 exit_code = 7;
  optional string command_line = 8;
  optional TestSize size = 9 [default=UNSPECIFIED_SIZE];
  optional TestStrategy strategy = 10 [default=UNSPECIFIED_STRATEGY];
  required string user = 11;

  // contains interleaved stdout and stderr
  optional TextFile combined_out = 15;
  // stdout, usually not used
  optional TextFile system_out = 16;
  // stderr, usually not used
  optional TextFile system_err = 17;
  // detailed hierarchical test results in xml, similar to Ant's "junit" task
  // output format
  optional TextFile xml = 18;
  // can be used to store parsed xml
  optional HierarchicalTestResult hierarchical_test_result = 19;
  optional TargetCoverage coverage = 20;
  // failed test attempts for the same test invocation, if any. This does not
  // include any internal retries done remotely.
  repeated TestTargetResult attempts = 21;
  // Test shard information (populated when test was sharded).
  optional int32 shard_number = 22;
  optional int32 total_shards = 23;
  // Test run number (used when test was executed multiple times).
  optional int32 run_number = 24;
  repeated TestWarning warning = 25;
  // Test language (deduced from the build rule).
  optional string language = 26;

  // Test overhead times (usually related to remote execution)
  // Deprecated: Use timing_breakdown instead
  optional int32 local_setup_millis = 27;
  optional int32 remote_setup_millis = 28;

  // The timing breakdown of the test.
  // If set, the top-level time should be the same as run_duration_millis.
  optional TimingBreakdown timing_breakdown = 29;

  // Whether the test result was served from a remote cache hit, potentially
  // from another user.
  optional bool remote_cache_hit = 30;

  // Where the test was executed.
  optional string hostname = 31;

  // protobuffer log location containing combined_out data split
  // by process outputing the entry (http://go/logsplitter)
  optional TextFile splitlogs = 32;

  // zip file containing files written by the test to
  // $TEST_UNDECLARED_OUTPUTS_DIR
  // See http://sites/matrix/matrix-design/undeclared-outputs
  optional TextFile undeclaredOutputsZip = 33;
  // Information about the testing infrastructure component that is the origin
  // of the test failure, if exists.
  optional InfrastructureFailureInfo infrastructure_failure_info = 34;
  // The tags of the target
  repeated string tag = 35;

  // Estimated memory consumption (in bytes) of the test.
  optional int64 memory_estimate = 36;

  optional TextFile test_diagnostics_data = 37;

  optional int64 system_time_millis = 38;
  optional int64 user_time_millis = 39;

  // The number of distinct input files.
  optional int64 distinct_input_file_count = 40;

  // The max allowed number of distinct input files.
  optional int64 distinct_input_file_count_limit = 41;

  // The total size of the distinct input files.
  optional int64 distinct_input_file_bytes = 42;

  // The max allowed total size of the distinct input files.
  optional int64 distinct_input_file_bytes_limit = 43;

  // File containing the annotations for custom descriptions of the undeclared
  // output files. See http://go/undeclared-output-manifest
  optional TextFile undeclared_outputs_annotations = 45;

  // File containing the manifest listing the undeclared output files.
  optional TextFile undeclared_outputs_manifest = 46;
}
