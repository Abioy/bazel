
# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

java_filetype = filetype([".java"])
jar_filetype = filetype([".jar"])

# This is a quick and dirty rule to make Bazel compile itself. It's not
# production ready.

def java_library_impl(ctx):
  class_jar = ctx.outputs.class_jar
  compile_time_jars = set([])
  runtime_jars = set(order="link")
  for dep in ctx.targets.deps:
    compile_time_jars += [dep.compile_time_jar]
    runtime_jars += dep.runtime_jars

  jars = jar_filetype.filter(ctx.files.jars)
  compile_time_jars += jars
  runtime_jars += jars
  compile_time_jar_list = list(compile_time_jars)

  build_output = class_jar.path + ".build_output"
  sources = ctx.files.srcs

  sources_param_file = ctx.new_file(
      ctx.configuration.bin_dir, class_jar, "-2.params")
  ctx.file_action(
      output = sources_param_file,
      content = files.join_exec_paths("\n", sources),
      executable = False)

  # Cleaning build output directory
  cmd = "set -e;rm -rf " + build_output + ";mkdir " + build_output + "\n"
  if ctx.files.srcs:
    cmd += "/usr/bin/javac"
    if compile_time_jar_list:
      cmd += " -classpath " + files.join_exec_paths(":", compile_time_jar_list)
    cmd += " -d " + build_output + " @" + sources_param_file.path + "\n"
  cmd += ("/usr/bin/jar cf " + class_jar.path + " -C " + build_output + " .\n" +
         "touch " + build_output + "\n")

  ctx.action(
    inputs = sources + compile_time_jar_list + [sources_param_file],
    outputs = [class_jar],
    mnemonic='Javac',
    command=cmd,
    use_default_shell_env=True)

  runfiles = ctx.runfiles(collect_data = True)

  return struct(files_to_build = set([class_jar]),
                compile_time_jar = class_jar,
                runtime_jars = runtime_jars + [class_jar],
                runfiles = runfiles)


def java_binary_impl(ctx):
  library_result = java_library_impl(ctx)

  deploy_jar = ctx.outputs.deploy_jar
  manifest = ctx.outputs.manifest
  build_output = deploy_jar.path + ".build_output"
  main_class = ctx.attr.main_class
  runtime_jars = set(order="link")
  for dep in ctx.targets.deps:
    runtime_jars += dep.runtime_jars

  runtime_jars += [library_result.compile_time_jar]

  jars = list(runtime_jars)
  ctx.file_action(
    output = manifest,
    content = "Main-Class: " + main_class + "\n",
    executable = False)

  # Cleaning build output directory
  cmd = "set -e;rm -rf " + build_output + ";mkdir " + build_output + "\n"
  for jar in jars:
    cmd += "unzip -qn " + jar.path + " -d " + build_output + "\n"
  cmd += ("/usr/bin/jar cmf " + manifest.path + " " +
         deploy_jar.path + " -C " + build_output + " .\n" +
         "touch " + build_output + "\n")

  ctx.action(
    inputs = jars + [manifest],
    outputs = [deploy_jar],
    mnemonic='Deployjar',
    command=cmd,
    use_default_shell_env=True)

  # Write the wrapper.
  executable = ctx.outputs.executable
  ctx.file_action(
    output = executable,
    content = '\n'.join([
        "#!/bin/bash",
        "# autogenerated - do not edit.",
        "case \"$0\" in",
        "/*) self=\"$0\" ;;",
        "*)  self=\"$PWD/$0\";;",
        "esac",
        "",
        "if [[ -z \"$JAVA_RUNFILES\" ]]; then",
        "  if [[ -e \"${self}.runfiles\" ]]; then",
        "    export JAVA_RUNFILES=\"${self}.runfiles\"",
        "  fi",
        "  if [[ -n \"$JAVA_RUNFILES\" ]]; then",
        "    export TEST_SRCDIR=${TEST_SRCDIR:-$JAVA_RUNFILES}",
        "  fi",
        "fi",
        "",
        ("exec java -jar $(dirname $self)/$(basename %s) %s \"$@\"" %
         (deploy_jar.path, main_class)),
        ""]),
    executable = True)

  runfiles = ctx.runfiles(files = [deploy_jar, executable], collect_data = True)
  files_to_build = set([deploy_jar, manifest, executable])
  files_to_build += library_result.files_to_build

  return struct(
      files_to_build = files_to_build,
      runfiles = runfiles)


java_library_attrs = {
    "data": attr.label_list(
        allow_files=True,
        allow_rules=False,
        cfg=DATA_CFG),
    "srcs": attr.label_list(allow_files=java_filetype),
    "jars": attr.label_list(allow_files=jar_filetype),
    "deps": attr.label_list(
        allow_files=False,
        providers = ["compile_time_jar", "runtime_jars"]),
    }

java_binary_attrs = {
    "main_class": attr.string()
} + java_library_attrs

java_library = rule(
    java_library_impl,
    attr = java_library_attrs,
    outputs = {
        "class_jar": "lib%{name}.jar",
    })

java_binary_outputs = {
    "class_jar": "lib%{name}.jar",
    "deploy_jar": "%{name}_deploy.jar",
    "manifest": "%{name}_MANIFEST.MF"
}

java_binary = rule(java_binary_impl,
   executable = True,
   attr = java_binary_attrs,
   outputs = java_binary_outputs)

java_test = rule(java_binary_impl,
   executable = True,
   attr = java_binary_attrs,
   outputs = java_binary_outputs,
   test = True,
)
